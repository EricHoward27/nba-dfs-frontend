// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  hashedPassword String?
  emailVerified DateTime?
  image         String?
  lineups       Lineup[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
// Team model
model Team {
  id     Int    @id @default(autoincrement())
  name   String
  code  String @unique
  //players Player[]
  homeGames Game[] @relation("HomeTeamRelation")
  awayGames Game[] @relation("AwayTeamRelation")
}

// Player model
model Player {
  id     Int    @id @default(autoincrement())
  name   String @unique
  position String
  //teamId Int
  //team   Team   @relation(fields: [teamId], references: [id])
  playerGameStats PlayerGameStats[]
  lineups LineupPlayer[]
  
}
// LineupPlayer model
model LineupPlayer {
  id     Int    @id @default(autoincrement())
  playerId Int
  lineupId Int
  player Player @relation(fields: [playerId], references: [id])
  lineup Lineup @relation(fields: [lineupId], references: [id])
}

// Game model
model Game {
  id     Int    @id @default(autoincrement())
  date   DateTime
  homeTeamId Int
  awayTeamId Int
  homeTeam Team @relation("HomeTeamRelation", fields: [homeTeamId], references: [id])
  awayTeam Team @relation("AwayTeamRelation", fields: [awayTeamId], references: [id])
  stats PlayerGameStats[]
}

// PlayerGameStats model 
model PlayerGameStats {
  id     Int    @id @default(autoincrement())
  playerId Int
  gameId Int
  player Player @relation(fields: [playerId], references: [id])
  game Game @relation(fields: [gameId], references: [id])
  points Int
  rebounds Int
  assists Int
  steals Int
  blocks Int
  turnovers Int
  fieldGoalsMade Int
  fieldGoalsAttempted Int
  threePointersMade Int
  threePointersAttempted Int
  freeThrowsMade Int
  freeThrowsAttempted Int
  minutesPlayed Int
  fantasyPoints Float
}

// Lineup model
model Lineup {
  id     Int    @id @default(autoincrement())
  userId String
  date  DateTime
  players LineupPlayer[]
  user User @relation(fields: [userId], references: [id])
}